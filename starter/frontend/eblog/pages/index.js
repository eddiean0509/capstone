import { useAuth0 } from "@auth0/auth0-react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import useSWR from "swr";
import Pagination from "@/components/pagination";

const fetcher = (...args) => fetch(...args).then((res) => res.json());

export default function Home() {
  const { isAuthenticated } = useAuth0();

  // router
  const router = useRouter();

  // useRef
  const searchRef = useRef();

  // page useState
  const [page, setPage] = useState(router.query.page || 1);

  // kw useState
  const [kw, setKw] = useState(router.query.kw || "");

  // post list
  const { data: posts, error } = useSWR(
    `http://127.0.0.1:5000/post/?page=${page}&kw=${kw}`,
    fetcher,
    {
      keepPreviousData: true,
      revalidateOnFocus: false,
    },
  );

  const onPageChange = (page) => {
    // update page state
    setPage(page);
  };

  const handleSearch = (e, kw) => {
    e.preventDefault();

    // update kw state
    setKw(kw);
  };

  // page, kw state가 변경될 때 라우터 업데이트
  useEffect(() => {
    if (router.query.page != page || router.query.kw != kw) {
      const query = {};
      if (page && page != 1) query.page = page;
      if (kw) query.kw = kw;

      //router
      router.push({ query: query });
    }
  }, [page, kw]);

  // 라우터가 변경될 때 page, kw state 업데이트
  useEffect(() => {
    if (router.query.page != page || router.query.kw != kw) {
      setPage(router.query.page || 1);
      setKw(router.query.kw || "");
    }

    // sync search input
    if (searchRef.current && searchRef.current.value != router.query.kw) {
      searchRef.current.value = router.query.kw || "";
    }
  }, [router.query.page, router.query.kw]);

  function TruncateText(props) {
    const maxLength = props.maxLength;
    const text = props.text;

    if (text.length > maxLength) {
      return <span>{text.substring(0, maxLength)}...</span>;
    } else {
      return <span>{text}</span>;
    }
  }

  const removeMd = require('remove-markdown')

  if (error) return <div>Failed to load</div>;
  if (!posts) return <div>Loading...</div>;

  return (
    <>
      <Head>
        <title>Have a good day!</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="container-fluid">
        </div>
        <div className="container my-3">
          <div className="container text-end my-3">
            {isAuthenticated ? (
              <Link href="/post/create" className="btn btn-primary">
                Write the Post
              </Link>
            ) : (
              <button className="btn btn-primary" type="button" disabled>
                Write the Post
              </button>
            )}
          </div>
          <div className="container">
            <div className="row">
              {posts.posts.map(function (post, i) {
                return (
                  <div className="col-6 my-3" key={post.id}>
                    <div className="container">
                      <div className="card" style={{ width: "28rem", height: "12rem" }}>
                        <div className="card-body p-1">
                          <div className="card-title mt-2">
                            <h5>
                              {post.subject}
                              {post.reply_set && post.reply_set.length > 0 && (
                                <span className="text-danger small mx-2">
                                  {post.reply_set.length}
                                </span>
                              )}
                            </h5>
                            <div className="text-muted mb-2">
                              <TruncateText text={removeMd(post.content)} maxLength={50} />
                            </div>
                            <div className="text-muted">
                              {" "}
                              {new Date(post.create_date).toLocaleString("en")}
                            </div>
                          </div>
                          <div className="card-subtitle my-2 text-muted">
                            By. {post.user.username}
                          </div>
                          <div className="text-end my-2">
                            <Link href={`/post/?id=${post.id}`}>View Details</Link>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
          <div className="mb-3 d-flex justify-content-center">
            <form>
              <div className="input-group">
                <input ref={searchRef} type="text" className="form-control" defaultValue={kw} />
                <div className="input-group-append">
                  <button
                    className="btn btn-outline-secondary"
                    type="submit"
                    onClick={(e) => handleSearch(e, searchRef.current.value)}
                  >
                    Search
                  </button>
                </div>
              </div>
            </form>
          </div>
          <Pagination pagination={posts} onPageChange={onPageChange} />
        </div>
      </main>
    </>
  );
}
